package com.tzh.java.design.chain
/**
 * 职责链模式
 *   优点:
 *     1.职责链模式使得一个对象无需知道是其它哪一个对象处理其请求,对象仅需要知道该请求
 *     会被处理即可,接受者和发送者都没有对方的明确信息,且链中的对象不需要知道链的结构
 *     ,有客户端负责连的创建,降低了系统的耦合度
 *     2.请求处理对象仅需位置一个指向其后继者的引用,而不需要维持它对所有的候选处理着的引用,可
 *     简化对象的相互连接
 *     3.再给对象分派职责时,职责链可以给我们更多的灵活性,可以通过在运行时对该链进行动态的增加或者修改
 *     来增加或改变处理一个请求的职责
 *     4.在系统中增加一个新的具体请求处理者时无需修改原有系统的代码,只需要在客户端重新链接即可,
 *     从这一点来看是符合 "开闭原则" 的
 *   缺点:
 *     1.由于一个请求没有明确的接受者,那么就不能保证它一定会被处理,该请求可能一直到链
 *     的末端都得不到处理, 一个请求也可能因职责链没有被正确配置而得不到处理
 *     2.对于比较长的职责链,请求的处理可能涉及到多个处理对象,系统性能将受到一定影响,而且
 *     在进行代码调试时不方便
 *     3.如果建链不当,可能会造成循环调用,将导致系统陷入死循环
 *
 *
 */
interface IChain {

    fun process(request: Request)
}